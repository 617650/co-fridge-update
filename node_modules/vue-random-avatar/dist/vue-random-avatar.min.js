var RandomAvatar = (function (exports, seedrandom) {
  'use strict';

  seedrandom = seedrandom && seedrandom.hasOwnProperty('default') ? seedrandom['default'] : seedrandom;

  var Random = function Random(seed) {
    this.rng = seedrandom(seed);
  };

  Random.prototype.number = function number () {
    return this.rng();
  };

  Random.prototype.integer = function integer (a, b) {
      if ( a === void 0 ) a = 0;
      if ( b === void 0 ) b = 1;

    return Math.floor(this.rng() * b) + a;
  };

  Random.prototype.select = function select (array) {
    return array[this.integer(0, array.length - 1)];
  };

  Random.prototype.colorRGB = function colorRGB () {
    var r = this.integer(0, 255);
    var g = this.integer(0, 255);
    var b = this.integer(0, 255);
    return ("rgb(" + r + ", " + g + ", " + b + ")");
  };

  Random.prototype.colorHSL = function colorHSL (s, l) {
      if ( s === void 0 ) s = 100;
      if ( l === void 0 ) l = 40;

    var h = this.integer(0, 360);
    return ("hsl(" + h + ", " + s + "%, " + l + "%)");
  };

  //

  var script = {
    props: {
      seed: {
        default: "",
        type: String
      },
      colors: {
        default: function () { return ["#1b85b8", "#5a5255", "#559e83", "#ae5a41", "#c3cb71"]; }, //({ lightness: 40, saturation: 80 })
        type: [Array, Object]
      },
      maxDivisions: {
        default: 4,
        type: Number
      },
      epsilon: {
        default: 0.01,
        type: Number
      }
    },

    data: function data() {
      return {
        cx: 80,
        cy: 80,
        radius: 60,
        strokeWidth: 30
      }
    },

    computed: {
      circumference: function circumference() {
        return 2 * Math.PI * this.radius
      },

      circles: function circles() {
        var this$1 = this;

        var rng = new Random(this.seed);
        var circumference = this.circumference - 1;
        var angleOffset = -90;
        var getColor = function () { return '#fff'; };

        if(this.colors instanceof Array) {
          getColor = function () { return rng.select(this$1.colors); };
        } else if (this.colors instanceof Object) {
          getColor = function () { return rng.colorHSL(this$1.colors.saturation || 100, this$1.colors.lightness || 40); };
        }

        return this.calcValues(rng, [], 1.0).map(function (x) {
          var resOffset = angleOffset;
          angleOffset = x * 360 + angleOffset;
          var strokeDiff = x * circumference;
          return {
            percentage: x,
            transform: ("rotate(" + resOffset + ", " + (this$1.cx) + ", " + (this$1.cy) + ")"),
            color: getColor(),
            strokeDashOffset: circumference - strokeDiff
          }
        })
      },
    },

    methods: {
      calcValues: function calcValues(rng, result, start) {
        var subs = rng.integer(1, this.maxDivisions);
        var part = start / subs;
        if (subs == 1 || part <= this.epsilon) {
          result.push(start);
          return result
        }

        for(var i = 0; i < subs; i++) {
          this.calcValues(rng, result, part);
        }

        return result
      },

      calculateStrokeDashOffset: function calculateStrokeDashOffset(percentage, circumference) {
        var strokeDiff = percentage * circumference;
        return circumference - strokeDiff
      }

    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  /* script */
  var __vue_script__ = script;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("svg", { attrs: { viewBox: "0 0 160 160" } }, [
      _c(
        "g",
        _vm._l(_vm.circles, function(circle, index) {
          return _c("circle", {
            key: index,
            attrs: {
              cx: _vm.cx,
              cy: _vm.cy,
              r: _vm.radius,
              fill: "transparent",
              stroke: circle.color,
              "stroke-width": _vm.strokeWidth,
              "stroke-dasharray": _vm.circumference,
              "stroke-dashoffset": circle.strokeDashOffset,
              transform: circle.transform,
              "shape-rendering": "optimizeQuality"
            }
          })
        }),
        0
      )
    ])
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = undefined;
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var component = normalizeComponent_1(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      undefined,
      undefined
    );

  // Import vue component

  // Declare install function executed by Vue.use()
  function install(Vue) {
    if (install.installed) { return; }
    install.installed = true;
    Vue.component('RandomAvatar', component);
  }

  // Create module definition for Vue.use()
  var plugin = {
    install: install,
  };

  // Auto-install when vue is found (eg. in browser via <script> tag)
  var GlobalVue = null;
  if (typeof window !== 'undefined') {
    GlobalVue = window.Vue;
  } else if (typeof global !== 'undefined') {
    GlobalVue = global.Vue;
  }
  if (GlobalVue) {
    GlobalVue.use(plugin);
  }

  exports.install = install;
  exports.default = component;

  return exports;

}({}, seedrandom));
